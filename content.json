{"meta":{"title":"RPChen`s Blog","subtitle":"The quieter you become,the more you are able to hear.","description":"个人博客","author":"RPChen","url":"http://www.rpchen.com"},"pages":[{"title":"存档","date":"2017-12-28T07:20:21.000Z","updated":"2017-12-28T08:21:03.771Z","comments":true,"path":"archives/index.html","permalink":"http://www.rpchen.com/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-12-28T07:12:51.000Z","updated":"2017-12-28T08:36:31.197Z","comments":false,"path":"categories/index.html","permalink":"http://www.rpchen.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-12-28T07:17:26.000Z","updated":"2017-12-28T08:35:56.844Z","comments":false,"path":"tags/index.html","permalink":"http://www.rpchen.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SSPanel 除主页外404错误","slug":"SSPanel404","date":"2018-01-02T02:58:18.000Z","updated":"2018-01-02T03:15:38.877Z","comments":true,"path":"2018/01/02/SSPanel404/","link":"","permalink":"http://www.rpchen.com/2018/01/02/SSPanel404/","excerpt":"","text":"nginx伪静态设置： vi /usr/local/nginx/conf/vhost/你的域名.conf 添加 location /{ try_files $uri $uri/ /index.php$is_args$args;}","categories":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/categories/建站/"}],"tags":[{"name":"SS","slug":"SS","permalink":"http://www.rpchen.com/tags/SS/"},{"name":"SSPanel","slug":"SSPanel","permalink":"http://www.rpchen.com/tags/SSPanel/"}]},{"title":"SSPanel部署教程","slug":"SSPanel-install","date":"2018-01-02T02:39:07.000Z","updated":"2018-01-02T03:14:51.084Z","comments":true,"path":"2018/01/02/SSPanel-install/","link":"","permalink":"http://www.rpchen.com/2018/01/02/SSPanel-install/","excerpt":"","text":"1.新建网站LNMP新建虚拟主机 lnmp vhost add vi打开你的nginx站点配置文件：/usr/local/nginx/conf/vhost/域名.conf vi /usr/local/nginx/conf/vhost/你的域名.conf 添加下面这段代码到你的配置文件中: location /{ try_files $uri $uri/ /index.php$is_args$args;} 并在root那一行在后面添加一个public: root /home/wwwroot/s.rpchen.com/public; 2.安装前端cd /home/wwwroot/域名 yum install git -y git clone https://github.com/glzjin/ss-panel-v3-mod.git tmp -b new_master &amp;&amp; mv tmp/.git . &amp;&amp; rm -rf tmp &amp;&amp; git reset --hard chown -R root:root * chmod -R 777 * chown -R www:www storage chattr -i .user.ini mv .user.ini public cd public chattr +i .user.ini service nginx restart 3.配置数据库通过浏览器打开phpmyadmin：http://你VPS的IP/phpmyadmin/登录进去新建一个用户并为这个用户创建一个同名的数据库，并授予全部权限，接着将glzjin_all.sql导入到这个新建的数据库中。进行ss-panel-v3-mod的配置： cd /home/wwwroot/你站点的域名 php composer.phar install cp config/.config.php.example config/.config.php vi config/.config.php 配置数据库等信息后给ss-panel-v3-mod创建一个管理员账号并同步用户： php -n xcat createAdmin php xcat syncusers 设置几个定时任务确保ss-panel-v3-mod的长期稳定运行。输入命令: yum install -y vixie-cron crontab -e 添加如下文本： 30 22 * * * php /home/wwwroot/你的站点域名/xcat sendDiaryMail */1 * * * * php /home/wwwroot/你的站点域名/xcat synclogin */1 * * * * php /home/wwwroot/你的站点域名/xcat syncvpn 0 0 * * * php -n /home/wwwroot/你的站点域名/xcat dailyjob */1 * * * * php /home/wwwroot/你的站点域名/xcat checkjob */1 * * * * php -n /home/wwwroot/你的站点域名/xcat syncnas 4.安装后端cd /root yum install python-setuptools &amp;&amp; easy_install pip yum install git yum -y groupinstall &quot;Development Tools&quot; wget https://github.com/jedisct1/libsodium/releases/download/1.0.10/libsodium-1.0.10.tar.gz tar xf libsodium-1.0.10.tar.gz &amp;&amp; cd libsodium-1.0.10 ./configure &amp;&amp; make -j2 &amp;&amp; make install echo /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf ldconfig git clone -b manyuser https://github.com/glzjin/shadowsocks.git cd shadowsocks yum -y install python-devel yum -y install libffi-devel yum -y install openssl-devel pip install -r requirements.txt cp apiconfig.py userapiconfig.py cp config.json user-config.json vi userapiconfig.py 将modwebapi改为：glzjinmod将节点ID改为3配置文件中的MySQL信息 接着在后台运行后端： ./run.sh 部署完毕。","categories":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/categories/建站/"}],"tags":[{"name":"SS","slug":"SS","permalink":"http://www.rpchen.com/tags/SS/"},{"name":"SSPanel","slug":"SSPanel","permalink":"http://www.rpchen.com/tags/SSPanel/"}]},{"title":"SSPanel 500 错误","slug":"SSPanel-500","date":"2018-01-02T02:31:59.000Z","updated":"2018-01-02T02:38:46.665Z","comments":true,"path":"2018/01/02/SSPanel-500/","link":"","permalink":"http://www.rpchen.com/2018/01/02/SSPanel-500/","excerpt":"","text":"起因是PHP基于open_basedir 设置，来限制PHP程序跨目录访问的安全策略，其使用.user.ini文件和nginx来配合（作用和.htaccess文件相同，这个是基于Apache httpd服务器）。 lnmp1.4一键安装对其配置是存在于/usr/local/nginx/conf/fastcgi.conf文件 fastcgi_param PHP_ADMIN_VALUE “open_basedir=$document_root/:/tmp/:/proc/“ 对于详细错误的解释：由于我们在站点配置文件/usr/local/nginx/conf/vhost/{WEB_SITE}.conf，网站根目录配置root /home/wwwroot/{WEB_SITE_NAME};这一行进行修改（修改成了root /home/wwwroot/{WEB_SITE_NAME}\\public;），因此open_basedir=$document_root/...中$document_root指的是网站的public目录，而非/home/wwwroot/{WEB_SITE_NAME}，在读取bootstrap.php文件（而该文件正好位于/home/wwwroot/{WEB_SITE_NAME}目录下，在public目录上一层）时出错，受跨目录访问安全限制。 主要有两种解决方案： 直接注释掉fastcgi.conf文件中的fastcgi_param PHP_ADMIN_VALUE &quot;open_basedir=$document_root/:/tmp/:/proc/&quot;;这一行，一棒子打死了目录访问安全策略 在fastcgi.conf文件中，修改fastcgi_param PHP_ADMIN_VALUE &quot;open_basedir=$document_root/:/tmp/:/proc/&quot;;，以test.com为例（此域名为添加vhost时输入的域名），修改内容如下：（这样做的坏处时每次添加vhost时都需要手动添加） /usr/local/nginx/conf/fastcgi.conffastcgi_param PHP_ADMIN_VALUE “open_basedir=/home/wwwroot/test.com/:/tmp/:/proc/“;","categories":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/categories/建站/"}],"tags":[{"name":"SS","slug":"SS","permalink":"http://www.rpchen.com/tags/SS/"},{"name":"SSPanel","slug":"SSPanel","permalink":"http://www.rpchen.com/tags/SSPanel/"}]},{"title":"LNMP使用教程","slug":"LNMP-use","date":"2018-01-02T02:26:35.000Z","updated":"2018-01-02T03:18:55.756Z","comments":true,"path":"2018/01/02/LNMP-use/","link":"","permalink":"http://www.rpchen.com/2018/01/02/LNMP-use/","excerpt":"","text":"添加网站(虚拟主机)执行： lnmp vhost add 伪静态管理LNMPA或LAMP可以直接使用网站根目录下放.htaccess 来设置伪静态规则(具体规则可以去程序官网网站找google百度)，但是在LNMP下，需要使用Nginx伪静态规则。伪静态可以随时添加或删除，如果添加完虚拟主机后忘记或没有添加伪静态，可以通过修改配置文件来添加伪静态。虚拟主机配置文件在：/usr/local/nginx/conf/vhost/域名.conf 伪静态规则文件需要放在/usr/local/nginx/conf/ 下面。编辑虚拟主机配置文件，可以使用vi、nano或winscp，后2个工具对新手来说简单些。 例如前面我们添加的虚拟主机，打开后前半部分配置会显示如下：在root /home/wwwroot/www.vpser.net;这一行下面添加：include wordpress.conf;上面的wordpress.conf为伪静态文件，如需要其他伪静态文件自己创建个并上传到/usr/local/nginx/conf/ 下面并include 伪静态.conf; 加完保存， 执行：/etc/init.d/nginx restart 重启生效，如果报错可能是添加有误或伪静态规则有误。 上传网站程序如果已经安装FTP服务器可以直接使用ftp客户端通过你的FTP信息登录后上传网站或sftp等软件上传网站，设置好相关权限开始安装即可。上传网站后建议执行：chown www:www -R /path/to/dir 对网站目录进行权限设置，/path/to/dir替换为你网站目录。为了安全可以将一些不需要PHP运行的上传文件之类的目录去掉执行权限，参考：http://www.vpser.net/security/lnmp-remove-nginx-php-execute.html 已存在虚拟主机添加ssl证书开启https对于已存在的虚拟主机添加https站点，可以执行：lnmp ssl add 命令添加ssl证书，目前有两种方式一种是使用自备的ssl证书，二是采用Let’sEncrypt的免费证书。添加过程和前面的添加虚拟主机的过程是一样的，只是会多一项填写ssl证书和key的步骤或直接选择Let’sEncrypt自动生成证书。如果是1.*版本升级到1.4或更改版本的需要参考：https://lnmp.org/faq/upgrade1-4.html 中的说明，如果有提示不安全或不显示小绿锁上面链接中也有说明。 列出网站(虚拟主机)执行：lnmp vhost list ##删除网站(虚拟主机)##执行：lnmp vhost del 删除网站会先列出当前已有虚拟主机，按提示输入要删除的虚拟主机域名 回车确认。 这里只是删除虚拟主机配置文件，网站文件并不会删除需要自己删除。LNMP 1.2下需要执行：chattr -i /网站目录/.user.ini 后才能删除网站目录。 当执行chown或chmod对网站目录属主属组或权限进行操作时可能会提示chown: changing ownership of `/home/wwwroot/default/.user.ini’: Operation not permitted，不需要理会，如果有强迫症可以参考前面先进行chattr -i的操作。 ##默认网站(虚拟主机)##LNMP默认网站配置文件：/usr/local/nginx/conf/nginx.confLNMPA默认网站配置文件：/usr/local/nginx/conf/nginx.conf 和 /usr/local/apache/conf/extra/httpd-vhosts.confLAMP默认网站配置文件：/usr/local/apache/conf/extra/httpd-vhosts.conf","categories":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/categories/建站/"}],"tags":[{"name":"LNMP","slug":"LNMP","permalink":"http://www.rpchen.com/tags/LNMP/"}]},{"title":"LNMP文件目录","slug":"lnmpfile","date":"2018-01-02T02:23:16.000Z","updated":"2018-01-02T02:26:08.216Z","comments":true,"path":"2018/01/02/lnmpfile/","link":"","permalink":"http://www.rpchen.com/2018/01/02/lnmpfile/","excerpt":"","text":"LNMP相关软件安装目录Nginx 目录: /usr/local/nginx/MySQL 目录 : /usr/local/mysql/MySQL数据库所在目录：/usr/local/mysql/var/MariaDB 目录 : /usr/local/mariadb/MariaDB数据库所在目录：/usr/local/mariadb/var/PHP目录 : /usr/local/php/多PHP版本目录 : /usr/local/php5.5/ 其他版本前面5.5的版本号换成其他即可PHPMyAdmin目录 : 0.9版本为/home/wwwroot/phpmyadmin/ 1.0及以后版本为 /home/wwwroot/default/phpmyadmin/ 强烈建议将此目录重命名为其不容易猜到的名字。phpmyadmin可自己从官网下载新版替换。默认网站目录 : 0.9版本为 /home/wwwroot/ 1.0及以后版本为 /home/wwwroot/default/Nginx日志目录：/home/wwwlogs//root/vhost.sh添加的虚拟主机配置文件所在目录：/usr/local/nginx/conf/vhost/PureFtpd 目录：/usr/local/pureftpd/PureFtpd web管理目录： 0.9版为/home/wwwroot/default/ftp/ 1.0版为 /home/wwwroot/default/ftp/Proftpd 目录：/usr/local/proftpd/Redis 目录：/usr/local/redis/ LNMP相关配置文件位置Nginx主配置(默认虚拟主机)文件：/usr/local/nginx/conf/nginx.conf添加的虚拟主机配置文件：/usr/local/nginx/conf/vhost/域名.confMySQL配置文件：/etc/my.cnfPHP配置文件：/usr/local/php/etc/php.iniphp-fpm配置文件：/usr/local/php/etc/php-fpm.confPureFtpd配置文件：/usr/local/pureftpd/pure-ftpd.conf 1.3及更高版本：/usr/local/pureftpd/etc/pure-ftpd.confPureFtpd MySQL配置文件：/usr/local/pureftpd/pureftpd-mysql.confProftpd配置文件：/usr/local/proftpd/etc/proftpd.conf 1.2及之前版本为/usr/local/proftpd/proftpd.confProftpd 用户配置文件：/usr/local/proftpd/etc/vhost/用户名.confRedis 配置文件：/usr/local/redis/etc/redis.conf LNMPA相关目录文件位置Apache目录：/usr/local/apache/Apache配置文件：/usr/local/apache/conf/httpd.confApache虚拟主机配置文件目录：/usr/local/apache/conf/vhost/Apache默认虚拟主机配置文件：/usr/local/apache/conf/extra/httpd-vhosts.conf虚拟主机配置文件名称：/usr/local/apache/conf/vhost/域名.conf","categories":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/categories/建站/"}],"tags":[{"name":"LNMP","slug":"LNMP","permalink":"http://www.rpchen.com/tags/LNMP/"}]},{"title":"LNMP安装","slug":"LNMPinstall","date":"2018-01-02T02:16:23.000Z","updated":"2018-01-02T03:18:13.085Z","comments":true,"path":"2018/01/02/LNMPinstall/","link":"","permalink":"http://www.rpchen.com/2018/01/02/LNMPinstall/","excerpt":"","text":"yum -y install wget wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp 默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lamp即可。如需更改网站和数据库目录先修改安装包目录下的 lnmp.conf 文件。","categories":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/categories/建站/"}],"tags":[{"name":"LNMP","slug":"LNMP","permalink":"http://www.rpchen.com/tags/LNMP/"},{"name":"LAMP","slug":"LAMP","permalink":"http://www.rpchen.com/tags/LAMP/"},{"name":"LNMPA","slug":"LNMPA","permalink":"http://www.rpchen.com/tags/LNMPA/"}]},{"title":"http转https(nginx)","slug":"http2https","date":"2018-01-02T02:01:59.000Z","updated":"2018-01-02T03:17:09.646Z","comments":true,"path":"2018/01/02/http2https/","link":"","permalink":"http://www.rpchen.com/2018/01/02/http2https/","excerpt":"","text":"vi /usr/local/nginx/conf/vhost/{domain name}.conf listen 80; server_name www.rpchen.com ; return 301 https://www.rpchen.com$request_uri;","categories":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/categories/建站/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://www.rpchen.com/tags/nginx/"},{"name":"https","slug":"https","permalink":"http://www.rpchen.com/tags/https/"},{"name":"ssl","slug":"ssl","permalink":"http://www.rpchen.com/tags/ssl/"},{"name":"http","slug":"http","permalink":"http://www.rpchen.com/tags/http/"}]},{"title":"三星工程代码","slug":"samsungcode","date":"2017-12-06T00:43:58.000Z","updated":"2017-12-29T07:34:52.982Z","comments":true,"path":"2017/12/06/samsungcode/","link":"","permalink":"http://www.rpchen.com/2017/12/06/samsungcode/","excerpt":"","text":"代码 功能 *#06# 查询手机串号(IMEI) *#1111# 查询FTASW版本 *#2222# 查询FTAHW版本 *#1234# 查询固件版本号 #0# 进入工程模式 *#0228# 电池状态 #12580369# 软硬件信息、出厂日期 *#2663# 固件信息更新等(TSPFW\\TOUCHKEYFWSENSORHUBFW等) *#34971539# 相机固件相关 *#7353# 快速测试菜单 *#0011# 网络信息、信号强度等 *#0283# looback测试 *#0808# USB设置 *#9090# service模式 *#9900# SysDump #2683662# 工程模式调网络代码","categories":[{"name":"移动终端","slug":"移动终端","permalink":"http://www.rpchen.com/categories/移动终端/"}],"tags":[{"name":"SamSung","slug":"SamSung","permalink":"http://www.rpchen.com/tags/SamSung/"},{"name":"手机","slug":"手机","permalink":"http://www.rpchen.com/tags/手机/"},{"name":"安卓","slug":"安卓","permalink":"http://www.rpchen.com/tags/安卓/"}]},{"title":"ESXI强制标记硬盘为SSD","slug":"esxi-HDD-SSD","date":"2017-12-04T08:44:22.000Z","updated":"2017-12-29T07:42:57.577Z","comments":true,"path":"2017/12/04/esxi-HDD-SSD/","link":"","permalink":"http://www.rpchen.com/2017/12/04/esxi-HDD-SSD/","excerpt":"","text":"列出：esxcli storage core device list标记：esxcli storage nmp satp rule add -s VMW_SATP_LOCAL -d naa.6b8ca3a0f451a90021a1485e0526587c -o enable_ssd回收：esxcli storage core claiming reclaim -d naa.6b8ca3a0f451a90021a1485e0526587c查看：esxcli storage core device list -d naa.6b8ca3a0f451a90021a1485e0526587c","categories":[{"name":"笔记存档","slug":"笔记存档","permalink":"http://www.rpchen.com/categories/笔记存档/"}],"tags":[{"name":"Esxi","slug":"Esxi","permalink":"http://www.rpchen.com/tags/Esxi/"}]},{"title":"申请Lets Encrypt证书","slug":"letsencrypt","date":"2017-12-04T08:30:31.000Z","updated":"2017-12-29T07:55:00.425Z","comments":true,"path":"2017/12/04/letsencrypt/","link":"","permalink":"http://www.rpchen.com/2017/12/04/letsencrypt/","excerpt":"","text":"12345yum install git-allyum install epel-releasegit clone https://github.com/certbot/certbotcd certbot./letsencrypt-auto certolny -d www.rpchen.com Apache下，修改ssl.conf文件 12vi /etc/httpd/conf/httpd.confvi /etc/httpd/conf.d/ssl.conf #Listen 443 https DocumentRoot “/var/www/html”ServerName www.rpchen.com:443SSLEngine onSSLCertificateFile /etc/letsencrypt/live/www.rpchen.com/fullchain.pemSSLCertificateKeyFile /etc/letsencrypt/live/www.rpchen.com/privkey.pem","categories":[{"name":"笔记存档","slug":"笔记存档","permalink":"http://www.rpchen.com/categories/笔记存档/"}],"tags":[{"name":"SSl","slug":"SSl","permalink":"http://www.rpchen.com/tags/SSl/"},{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/tags/建站/"},{"name":"证书","slug":"证书","permalink":"http://www.rpchen.com/tags/证书/"}]},{"title":"vsftpd配置文件详解","slug":"vsftpdconf","date":"2017-12-04T08:09:37.000Z","updated":"2017-12-29T08:13:34.379Z","comments":true,"path":"2017/12/04/vsftpdconf/","link":"","permalink":"http://www.rpchen.com/2017/12/04/vsftpdconf/","excerpt":"","text":"1.默认配置：1&gt;允许匿名用户和本地用户登陆。 anonymous_enable=YES local_enable=YES 2&gt;匿名用户使用的登陆名为ftp或anonymous，口令为空；匿名用户不能离开匿名用户家目录/var/ftp,且只能下载不能上传。 3&gt;本地用户的登录名为本地用户名，口令为此本地用户的口令；本地用户可以在自 己家目录中进行读写操作；本地用户可以离开自家目录切换至有权限访问的其他目录，并在权限允许的情况下进行上传/下载。 write_enable=YES 4&gt;写在文件/etc/vsftpd.ftpusers中的本地用户禁止登陆。 2.配置文件格式：vsftpd.conf 的内容非常单纯，每一行即为一项设定。若是空白行或是开头为#的一行，将会被忽略。内容的格式只有一种，如下所示 option=value 要注意的是，等号两边不能加空白。 3.匿名用户（anonymous）设置anonymous_enable=YES/NO**（YES） 控制是否允许匿名用户登入，YES 为允许匿名登入，NO 为不允许。默认值为YES。 write_enable=YES/NO**（YES） 是否允许登陆用户有写权限。属于全局设置，默认值为YES。 no_anon_password=YES/NO**（NO） 若是启动这项功能，则使用匿名登入时，不会询问密码。默认值为NO。 ftp_username=ftp 定义匿名登入的使用者名称。默认值为ftp。 anon_root=/var/ftp 使用匿名登入时，所登入的目录。默认值为/var/ftp。注意ftp目录不能是777的权限属性，即匿名用户的家目录不能有777的权限。 anon_upload_enable=YES/NO**（NO） 如果设为YES，则允许匿名登入者有上传文件（非目录）的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。 anon_world_readable_only=YES/NO**（YES） 如果设为YES，则允许匿名登入者下载可阅读的档案（可以下载到本机阅读，不能直接在FTP服务器中打开阅读）。默认值为YES。 anon_mkdir_write_enable=YES/NO**（NO） 如果设为YES，则允许匿名登入者有新增目录的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。 anon_other_write_enable=YES/NO**（NO） 如果设为YES，则允许匿名登入者更多于上传或者建立目录之外的权限，譬如删除或者重命名。（如果anon_upload_enable=NO，则匿名用户不能上传文件，但可以删除或者重命名已经存在的文件；如果anon_mkdir_write_enable=NO，则匿名用户不能上传或者新建文件夹，但可以删除或者重命名已经存在的文件夹。）默认值为NO。 chown_uploads=YES/NO**（NO） 设置是否改变匿名用户上传文件（非目录）的属主。默认值为NO。 chown_username=username 设置匿名用户上传文件（非目录）的属主名。建议不要设置为root。 anon_umask=077 设置匿名登入者新增或上传档案时的umask 值。默认值为077，则新建档案的对应权限为700。 deny_email_enable=YES/NO**（NO） 若是启动这项功能，则必须提供一个档案/etc/vsftpd/banner_emails，内容为email address。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。默认值为NO。 banned_email_file=/etc/vsftpd/banner_emails 此文件用来输入email address，只有在deny_email_enable=YES时，才会使用到此档案。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。 4.本地用户设置local_enable=YES/NO**（YES） 控制是否允许本地用户登入，YES 为允许本地用户登入，NO为不允许。默认值为YES。 local_root=/home/username 当本地用户登入时，将被更换到定义的目录下。默认值为各用户的家目录。 write_enable=YES/NO**（YES） 是否允许登陆用户有写权限。属于全局设置，默认值为YES。 local_umask=022 本地用户新增档案时的umask 值。默认值为077。 file_open_mode=0755 本地用户上传档案后的档案权限，与chmod 所使用的数值相同。默认值为0666。 5.欢迎语设置dirmessage_enable=YES/NO**（YES） 如果启动这个选项，那么使用者第一次进入一个目录时，会检查该目录下是否有.message这个档案，如果有，则会出现此档案的内容，通常这个档案会放置欢迎话语，或是对该目录的说明。默认值为开启。 message_file=.message 设置目录消息文件，可将要显示的信息写入该文件。默认值为.message。 banner_file=/etc/vsftpd/banner 当使用者登入时，会显示此设定所在的档案内容，通常为欢迎话语或是说明。默认值为无。如果欢迎信息较多，则使用该配置项。 ftpd_banner=Welcome to BOB’s FTP server 这里用来定义欢迎话语的字符串，banner_file是档案的形式，而ftpd_banner 则是字符串的形式。预设为无。 6.控制用户是否允许切换到上级目录在默认配置下，本地用户登入FTP后可以使用cd命令切换到其他目录，这样会对系统带来安全隐患。可以通过以下三条配置文件来控制用户切换目录。 chroot_list_enable=YES/NO**（NO） 设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。 chroot_list_file=/etc/vsftpd.chroot_list 用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。 chroot_local_user=YES/NO**（NO） 用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。 通过搭配能实现以下几种效果： ①当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。 ②当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。 ③当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。 ④当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。 7.数据传输模式设置FTP在传输数据时，可以使用二进制方式，也可以使用ASCII模式来上传或下载数据。 ascii_upload_enable=YES/NO**（NO） 设置是否启用ASCII 模式上传数据。默认值为NO。 ascii_download_enable=YES/NO**（NO） 设置是否启用ASCII 模式下载数据。默认值为NO。 8.访问控制设置两种控制方式：一种控制主机访问，另一种控制用户访问。 ①控制主机访问： tcp_wrappers=YES/NO**（YES） 设置vsftpd是否与tcp wrapper相结合来进行主机的访问控制。默认值为YES。如果启用，则vsftpd服务器会检查/etc/hosts.allow 和/etc/hosts.deny 中的设置，来决定请求连接的主机，是否允许访问该FTP服务器。这两个文件可以起到简易的防火墙功能。 比如：若要仅允许192.168.0.1—192.168.0.254的用户可以连接FTP服务器，则在/etc/hosts.allow文件中添加以下内容： vsftpd:192.168.0. :allow all:all :deny ②控制用户访问： 对于用户的访问控制可以通过/etc目录下的vsftpd.user_list和ftpusers文件来实现。 userlist_file=/etc/vsftpd.user_list 控制用户访问FTP的文件，里面写着用户名称。一个用户名称一行。 userlist_enable=YES/NO**（NO） 是否启用vsftpd.user_list文件。 userlist_deny=YES/NO**（YES） 决定vsftpd.user_list文件中的用户是否能够访问FTP服务器。若设置为YES，则vsftpd.user_list文件中的用户不允许访问FTP，若设置为NO，则只有vsftpd.user_list文件中的用户才能访问FTP。 /etc/vsftpd/ftpusers文件专门用于定义不允许访问FTP服务器的用户列表（注意:如果userlist_enable=YES,userlist_deny=NO,此时如果在vsftpd.user_list和ftpusers中都有某个用户时，那么这个用户是不能够访问FTP的，即ftpusers的优先级要高）。默认情况下vsftpd.user_list和ftpusers，这两个文件已经预设置了一些不允许访问FTP服务器的系统内部账户。如果系统没有这两个文件，那么新建这两个文件，将用户添加进去即可。 9.访问速率设置anon_max_rate=0 设置匿名登入者使用的最大传输速度，单位为B/s，0 表示不限制速度。默认值为0。 local_max_rate=0 本地用户使用的最大传输速度，单位为B/s，0 表示不限制速度。预设值为0。 10.超时时间设置accept_timeout=60 设置建立FTP连接的超时时间，单位为秒。默认值为60。 connect_timeout=60 PORT 方式下建立数据连接的超时时间，单位为秒。默认值为60。 data_connection_timeout=120 设置建立FTP数据连接的超时时间，单位为秒。默认值为120。 idle_session_timeout=300 设置多长时间不对FTP服务器进行任何操作，则断开该FTP连接，单位为秒。默认值为300 。 11.日志文件设置xferlog_enable= YES/NO**（YES） 是否启用上传/下载日志记录。如果启用，则上传与下载的信息将被完整纪录在xferlog_file 所定义的档案中。预设为开启。 xferlog_file=/var/log/vsftpd.log 设置日志文件名和路径，默认值为/var/log/vsftpd.log。 xferlog_std_format=YES/NO**（NO） 如果启用，则日志文件将会写成xferlog的标准格式，如同wu-ftpd 一般。默认值为关闭。 log_ftp_protocol=YES|NO**（NO）如果启用此选项，所有的FTP请求和响应都会被记录到日志中，默认日志文件在/var/log/vsftpd.log。启用此选项时，xferlog_std_format不能被激活。这个选项有助于调试。默认值为NO。 12.定义用户配置文件在vsftpd中，可以通过定义用户配置文件来实现不同的用户使用不同的配置。 user_config_dir=/etc/vsftpd/userconf 设置用户配置文件所在的目录。当设置了该配置项后，用户登陆服务器后，系统就会到/etc/vsftpd/userconf目录下，读取与当前用户名相同的文件，并根据文件中的配置命令，对当前用户进行更进一步的配置。 例如：定义user_config_dir=/etc/vsftpd/userconf，且主机上有使用者 test1,test2，那么我们就在user_config_dir 的目录新增文件名为test1和test2两个文件。若是test1 登入，则会读取user_config_dir 下的test1 这个档案内的设定。默认值为无。利用用户配置文件，可以实现对不同用户进行访问速度的控制，在各用户配置文件中定义local_max_rate=XX，即可。 13.FTP的工作方式与端口设置FTP有两种工作方式：PORT FTP（主动模式）和PASV FTP（被动模式） listen_port=21 设置FTP服务器建立连接所监听的端口，默认值为21。 connect_from_port_20=YES/NO 指定FTP使用20端口进行数据传输，默认值为YES。 ftp_data_port=20 设置在PORT方式下，FTP数据连接使用的端口，默认值为20。 pasv_enable=YES/NO**（YES） 若设置为YES，则使用PASV工作模式；若设置为NO，则使用PORT模式。默认值为YES，即使用PASV工作模式。 pasv_max_port=0 在PASV工作模式下，数据连接可以使用的端口范围的最大端口，0 表示任意端口。默认值为0。 pasv_min_port=0 在PASV工作模式下，数据连接可以使用的端口范围的最小端口，0 表示任意端口。默认值为0。 14.与连接相关的设置listen=YES/NO**（YES） 设置vsftpd服务器是否以standalone模式运行。以standalone模式运行是一种较好的方式，此时listen必须设置为YES，此为默认值。建议不要更改，有很多与服务器运行相关的配置命令，需要在此模式下才有效。若设置为NO，则vsftpd不是以独立的服务运行，要受到xinetd服务的管控，功能上会受到限制。 max_clients=0 设置vsftpd允许的最大连接数，默认值为0，表示不受限制。若设置为100时，则同时允许有100个连接，超出的将被拒绝。只有在standalone模式运行才有效。 max_per_ip=0 设置每个IP允许与FTP服务器同时建立连接的数目。默认值为0，表示不受限制。只有在standalone模式运行才有效。 listen_address=IP**地址 设置FTP服务器在指定的IP地址上侦听用户的FTP请求。若不设置，则对服务器绑定的所有IP地址进行侦听。只有在standalone模式运行才有效。 setproctitle_enable=YES/NO**（NO） 设置每个与FTP服务器的连接，是否以不同的进程表现出来。默认值为NO，此时使用ps aux |grep ftp只会有一个vsftpd的进程。若设置为YES，则每个连接都会有一个vsftpd的进程。 15.虚拟用户设置虚拟用户使用PAM认证方式。 pam_service_name=vsftpd 设置PAM使用的名称，默认值为/etc/pam.d/vsftpd。 guest_enable= YES/NO**（NO） 启用虚拟用户。默认值为NO。 guest_username=ftp 这里用来映射虚拟用户。默认值为ftp。 virtual_use_local_privs=YES/NO**（NO） 当该参数激活（YES）时，虚拟用户使用与本地用户相同的权限。当此参数关闭（NO）时，虚拟用户使用与匿名用户相同的权限。默认情况下此参数是关闭的（NO）。 16.其他设置text_userdb_names= YES/NO**（NO） 设置在执行ls –la之类的命令时，是显示UID、GID还是显示出具体的用户名和组名。默认值为NO，即以UID和GID方式显示。若希望显示用户名和组名，则设置为YES。 ls_recurse_enable=YES/NO**（NO） 若是启用此功能，则允许登入者使用ls –R（可以查看当前目录下子目录中的文件）这个指令。默认值为NO。 hide_ids=YES/NO**（NO） 如果启用此功能，所有档案的拥有者与群组都为ftp，也就是使用者登入使用ls -al之类的指令，所看到的档案拥有者跟群组均为ftp。默认值为关闭。 download_enable=YES/NO（YES） 如果设置为NO，所有的文件都不能下载到本地，文件夹不受影响。默认值为YES。 FTPS+被动 anonymous_enable=NOconnect_from_port_20=YESdirmessage_enable=YESforce_local_data_ssl=YESforce_local_logins_ssl=YESimplicit_ssl=YESlisten=YESlocal_enable=YESlocal_umask=022pam_service_name=vsftpdpasv_enable=YESrsa_cert_file=/etc/letsencrypt/live/www.rpchen.com/fullchain.pemrsa_private_key_file=/etc/letsencrypt/live/www.rpchen.com/privkey.pemssl_enable=YESssl_sslv2=NOssl_sslv3=NOssl_tlsv1=YEStcp_wrappers=YESuserlist_enable=YESwrite_enable=YESxferlog_enable=YESxferlog_std_format=YES 主动 anonymous_enable=NOconnect_from_port_20=YESdirmessage_enable=YESlisten=YESlocal_enable=YESlocal_umask=022pam_service_name=vsftpdpasv_enable=NOtcp_wrappers=YESuserlist_enable=YESwrite_enable=YESxferlog_enable=YESxferlog_std_format=YES","categories":[{"name":"转载存档","slug":"转载存档","permalink":"http://www.rpchen.com/categories/转载存档/"}],"tags":[{"name":"建站","slug":"建站","permalink":"http://www.rpchen.com/tags/建站/"},{"name":"vsftpd","slug":"vsftpd","permalink":"http://www.rpchen.com/tags/vsftpd/"}]},{"title":"RedHat命令","slug":"redhatcode","date":"2017-12-04T08:05:04.000Z","updated":"2017-12-29T03:44:34.913Z","comments":true,"path":"2017/12/04/redhatcode/","link":"","permalink":"http://www.rpchen.com/2017/12/04/redhatcode/","excerpt":"","text":"帮助手册： man ** 查看进程： PS 监听端口： netstat -anp | grep 665","categories":[{"name":"笔记存档","slug":"笔记存档","permalink":"http://www.rpchen.com/categories/笔记存档/"}],"tags":[]},{"title":"PowerShell命令","slug":"powershellcode","date":"2017-12-04T07:53:38.000Z","updated":"2017-12-29T08:00:28.649Z","comments":true,"path":"2017/12/04/powershellcode/","link":"","permalink":"http://www.rpchen.com/2017/12/04/powershellcode/","excerpt":"","text":"1.查询值：Get-ADUser -Filter {pager -eq &quot;a1&quot;} 2.修改值：Set-ADUser -DisplayName * get-ADUser -Filter {employeeid -eq &quot;010738955&quot;}|Set-ADUser -employeeid **** Import-Csv -Path c:\\abc.csv | foreach {Set-ADUser -Identity $.name -DisplayName $.DisplayName} 3.查询导出：Get-ADUser -Filter -Properties -SearchBase &quot;OU=GZ,DC=CONTOSO,DC=COM&quot; | Select-Object name,department |Export-Csv -NoTypeInformation -Encoding UTF8 -Path &quot;c:\\dep.csv&quot; 4.批量导入查询导出：Import-Csv -Path d:\\1.csv | foreach {Get-ADUser $_.name -Properties * } |select name,LogonWorkstations|Export-Csv -NoTypeInformation -Encoding UTF8 -Path &quot;d:\\dep.csv&quot; 5.新建：New-ADUser -Name ken -DisplayName ken -SamAccountName ken -Company canway -UserPrincipalName ken -AccountPassword (ConvertTo-SecureString 1qaz@WSX -AsPlainText -Force) -Enabled $true -Path &quot;ou=it,ou=gz,dc=contoso,dc=com&quot; 6.批量创建AD：Import-csv d:\\0.csv | foreach {New-ADUser -Name $.name -description $.FullChineseName -givenName $.FirstName -DisplayName $.name -Samaccountname $.name -UserPrincipalName $.un -Surname $.LastName -Company $.StaffCompany -officephone $.officephone -employeeid $.StaffNo -department $.Department -manager $.SuperiorManager -title $_.AccountTitle -AccountPassword (ConvertTo-SecureString Kaifa@123 -AsPlainText -Force) -Path &quot;OU=MDBU1_Users,OU=MDBU1,OU=kfft,DC=gwkf,DC=cn&quot; -ChangePasswordAtlogon $True –Enabled $True} 7.启用Exchange：Enable-Mailbox -Identity ShuangShuangGuan -Alias &#39;****&#39; -Database &#39;KFSZStaff05&#39; 8.查询用户信息：Get-MailboxStatistics &#39;XiuJuanLi1&#39; | fl 9.迁移用户数据库：&quot;BoXie&quot; | New-MoveRequest -TargetDatabase &#39;KFDGManagers01&#39; 10.启用Skype:Enable-CsUser –Identity ShuangShuangGuan -RegistrarPool SZSkypePool01.gwkf.cn -SipAddressType UserPrincipalName Import-csv d:\\0.csv | foreach {New-ADUser -Name $.name -description $.description -givenName $.givenName -DisplayName $.name -Samaccountname $.name -UserPrincipalName $.un -Surname $.sn -Company $.company -title $_.title -AccountPassword (ConvertTo-SecureString Kaifa@123 -AsPlainText -Force) -Path &quot;OU=CCBU_Users,OU=CCBU,OU=KFPI,DC=gwkf,DC=cn&quot; -ChangePasswordAtlogon $True –Enabled $True} Import-csv c:\\ADuser.csv | foreach {New-ADUser -Name $.Name -DisplayName $.Displayname -Samaccountname $.Samaccountname -UserPrincipalName $.UserPrincipalName -Company $.Company -Department $.Department -Surname $.Surname -GivenName $.GivenName -AccountPassword (ConvertTo-SecureString $.AccountPassword -AsPlainText -Force) -Path $.Path -ChangePasswordAtlogon $True –Enabled $True} Import-csv d:\\A.csv|foreach{get-adcomputer $_.computer -properties * }|Select-Object name,operatingsystem |Export-Csv -NoTypeInformation -Encoding UTF8 -Path &quot;d:\\c.csv&quot;","categories":[{"name":"笔记存档","slug":"笔记存档","permalink":"http://www.rpchen.com/categories/笔记存档/"}],"tags":[{"name":"PowerShell","slug":"PowerShell","permalink":"http://www.rpchen.com/tags/PowerShell/"}]},{"title":"SSR协议的选择","slug":"ssr-method","date":"2017-12-04T07:41:46.000Z","updated":"2017-12-29T03:44:34.913Z","comments":true,"path":"2017/12/04/ssr-method/","link":"","permalink":"http://www.rpchen.com/2017/12/04/ssr-method/","excerpt":"","text":"其实这个要说的少得多，总之就一句话，能用auth_aes128_md5或auth_aes128_sha1的，就直接用这两个，最好不要开启兼容，其它的协议都不建议。但如果要解释的话，这个说来话长，需要一点点说明其它的协议的特性。以下简略说明一下各协议的问题。 首先我们来看原版协议（origin），原版协议有着最少的数据冗余，在没有限制的情况下，必然是原版协议速度最快，这是毫无疑问的。其它的协议的兼容，全是为了兼容原版协议。那既然原版理论上最快为什么不直接用？因为它没有数据完整性校验，无法确认数据是否被篡改，容易被攻击，它也没有做数据包的长度混淆，可以通过数据包长度统计分析检测出来（例如此专利中所说的方案）。当然如果你所在的地区直接使用没有感觉有什么问题，那直接使用就可以了，没有必要考虑后面的。 接着来看原版的OTA协议，这个协议增加了从客户端到服务端单向的完整性校验，于是服务端到客户端的方向还是存在同样的问题，且它也没有做数据包的长度混淆，一样可以通过数据包长度统计分析检测出来。另外此协议并非能抵抗CCA（Chosen ciphertext attack），依然可以通过CCA来确定这是不是OTA协议（通过服务端行为攻击，具体方法这里不说）。 &nbsp; 然后再看SSR的auth_sha1和auth_sha1_v2协议，这两协议几乎一样，这两协议都有双向的完整性校验，有数据包的长度混淆，有抵抗重放攻击的能力，但缺点是不能完全抵抗CCA，可使用检测OTA的方法检测出来（不用改动一行代码，但无法区分到底是OTA还是auth_sha1，如要确定，那只要对服务端发向客户端的方向发起CCA攻击即可区分） 再来看看SSR的auth_sha1_v4协议，相对于auth_sha1，在抵抗CCA方面有改进，但依然不是完全抵抗CCA，尽管多增加了长度校验避免服务端行为攻击，但因为校验使用的是CRC32，而CRC32可以通过已知的正确的数据包，再通过同时修改包长度字段和CRC32来伪造出正确的值，所以虽然攻击难度增加了，但并非完全抵抗CCA。不过某防火墙要如此针对性的攻击此协议的可能性非常低，可以认为基本安全，但如果你条件允许，那还是看下面两个协议吧。 最后再看看auth_aes128_md5和auth_aes128_sha1，这两协议在关键的认证数据区使用Encrypt-then-MAC，使其无法CCA，而后续的数据包均使用HMAC，且每个连接的不同数据包用的HMAC的KEY都不一样，之前的攻击方案均失效。对于这个协议我自己还没有想到有效的攻击手段，并且此协议的网络利用率比其它的auth系列协议要高，也是唯一一组抗CCA的协议，所以我推荐大家使用这个协议。不过唯一的缺点是这个协议计算量会比其它的协议要多，代码编写较复杂。关于此协议我写了一个简要的文档说明。 其它花絮：因为auth_aes128_md5协议的前数百个字节不是random的就是HMAC或加密的，总之前面一大堆表面看起来都像是random，所以我曾经试过直接用这个协议裸跑（不使用加密也不使用混淆），结果显示完全能正常使用。但还是不建议大家这么做，毕竟后面还是带着明文的，要是关键字检测会检测到那么后面的话就挂了（但给我的感觉是这个明文关键字检测并不严厉，似乎只针对http, TLS, socks等已知协议） 关于协议就简略讲到这里了（如何攻击这里不讲，否则要列举一堆例子和演示代码，更具体的以后会有机会讲的），有什么问题可补充。 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 最初我设计这个混淆的时候并没有想到如今产生了如此多的黑科技用法，只是想着伪装为看起来像正常的流量，减少被注意到的可能性而已。 对于大多数人来说，混淆并不是必须使用的，不使用混淆其实都能正常使用，而且在这当中有近一半人所在的地区的网络，直接使用原版的SS能获得更好的速度。那么什么时候你应该使用混淆呢？第一类是遇到QoS情况的，使用混淆能提速的人，第二类是所在网络有严格限制，仅能使用80/443端口，不认识的协议根本不能用的（如学校、公司、政府办公网络），第三类是对自己的隐私有要求的，希望在运营商的连接记录里留下看起来正常的访问记录，第四类是试图绕过学校或运营商的计费系统的人，第五类其它黑科技用途保密。以上第四类并不在本文的讨论范围，这属于漏洞利用的非法用途。下文仅针对前三类进行展开。 &nbsp; 首先是混淆参数的问题。这个混淆参数可根据你的设定，伪装为对任意host的访问，但我不建议你填写此参数，但建议服务端节点带有域名及正确的解析，这样你不需要填写参数，客户端将直接使用你的节点的域名作为参数。为什么应该这样做呢？因为我了解到，运营商已经在少数地区布置了DNS验证系统（有可能是故意针对SSR的），如果你发出的http/tls请求里的域名解析出的IP地址列表，与你所连接的实际IP不一致，多次请求后就可能会把此IP加入临时黑名单。所以，如果节点有域名，那么参数不写其实是最好的，很多人都习惯写一个大公司网站的域名，其实这反而留下了一个可被检测的地方。 针对第一类人，关于QoS的问题，唯一的办法就是测试了，各地区不同，不同时间效果也不同，不同端口和混淆参数效果也不同。服务端同时开几个端口，一些开http，一些开tls，多测测测出你认为速度较好的组合使用就好。 针对第二类人，那么首先要了解清楚所在的网络环境的限制方式，包括访问端口限制，访问域名限制，协议类型限制，访问IP限制。如果你发现存在访问IP限制，那你可以死心了，除非你在此网络下有另一个节点可以通过它作二级代理访问无IP限制的外部网络。对于端口限制，它限制只能哪些端口，那么你在服务端就开哪些端口，而协议类型除了特别变态的，一般都能用http，如果有域名限制，那么混淆参数就填写能用的域名即可。另外很多公司还有一类外网的访问限制，就是必须通过它提供的二级代理，这时你只需要在客户端的二级代理的地方对应的填写一下即可（部分代理可能必须填写UserAgent）。基本上就是见招拆招，如果有太特别的，没法解决的可联系我说说是什么奇葩的限制（例如不少高校网络都要安装专用的登陆（监控）客户端还只能windows使用，还会劫持你流量的方式才能上网，还限制只能单网卡什么的，那确实非常恶心）。 针对第三类人，如果是联通的比较好办，它提供了可供查询的列表，实验一下你就明白具体效果了。对于其它的运营商，这个列表也绝对是有的，只是不公开给你查询罢了，如果你担心这个，那开启混淆就好了。这种情况下建议使用国内服务器中转并混淆参数使用国内的网站域名。当然，对于这类情况，能更好的减少流量被注意的可能性，即使你所在的网络并没有QoS或其它限制，也能减少被无故限速的风险。 关于混淆就讲到这里了，有什么问题可补充。下一篇将会讲协议的选择","categories":[{"name":"转载存档","slug":"转载存档","permalink":"http://www.rpchen.com/categories/转载存档/"}],"tags":[]},{"title":"SSR单端口多用户配置方法","slug":"ssr-oneportduouser","date":"2017-12-04T07:36:31.000Z","updated":"2017-12-29T03:44:34.913Z","comments":true,"path":"2017/12/04/ssr-oneportduouser/","link":"","permalink":"http://www.rpchen.com/2017/12/04/ssr-oneportduouser/","excerpt":"","text":"第一部分：直接修改服务端配置文件大法，仅适用于使用单用户配置的情况 首先是服务端的配置 服务端把协议(protocol)配置为 auth_aes128_md5 或 auth_aes128_sha1，然后在协议参数(protocol_param)配置所有可用的用户id及其密码，示例如下： “protocol”: “auth_aes128_sha1”, “protocol_param”: “64#12345:breakwa11,233:zhihuyaowan”, 含义： 在#前面的表示每个用户的最大客户端数，照着写这个值或者不填都可以，但必须有#号。在#后，以英文逗号分隔所有的用户，而英文冒号的前面是用户的id，注意这个id必须是范围在 1~2147483647之间，后面的是用户的密码，密码不能有特殊符号，建议仅使用数字和大小写字母 然后是客户端的配置（此处配置同样适合下文的其它配置模式） 客户端方面非常简单，需要使用用户id为12345的连接，那么在客户端的协议参数(protocol_param)里面填写 12345:breakwa11 就行了，如果使用id为233的同理，其它参数服务端怎么配置的就怎么写 那既然多用户可以单端口了，那能不能做得更像一个网站？完全可以的，如果是http的话，服务端安装一个nginx之类，把端口开在8080（监听127.0.0.1），然后SSR的端口开在80，同时在SSR的user-config.json里修改参数 “redirect” : “127.0.0.1:8080”, 这时，直接用浏览器打开，就可以直接看到你开的网站了，而改成用SSR客户端连接就成了服务端了。不过注意的是这时候最好要开相应的混淆哦ヽ(´▽｀)ノ 目前这个是刚出的功能，还在测试中，后端和面板还没有相应的支持，也没有流量控制等，建议几个人自己合玩的时候可以这样用，特别地在某些学校或公司这个功能非常好用的哦。 第二部分：使用mudbjson模式配置（适合单服务器多人合用或试用服务器） 2017-02-21更新： 现mudbjson模式多用户已支持，简要说明如下： 首先先创建对应的用户id，如果这个id大于65535，那么此用户仅用于多用户模式，小于等于65535时会同时监听这个端口。然后创建多用户端口，相应的protocol_param里就填写”#”就行了，以下是配置示例： [ { “d”: 0, “enable”: 1, “method”: “aes-128-cfb”, “obfs”: “tls1.2_ticket_auth_compatible”, “passwd”: “vwHF%35j”, “port”: 12345, “protocol”: “auth_aes128_sha1”, “protocol_param”: “#”, “transfer_enable”: 1125899906842624, “u”: 0, “user”: “12345” }, { “d”: 0, “enable”: 1, “method”: “aes-128-cfb”, “obfs”: “tls1.2_ticket_auth_compatible”, “passwd”: “E&amp;iWmlxu”, “port”: 10001, “protocol”: “auth_sha1_v4”, “transfer_enable”: 536870912, “u”: 0, “user”: “10001” }, { “d”: 0, “enable”: 1, “method”: “aes-128-cfb”, “obfs”: “tls1.2_ticket_auth_compatible”, “passwd”: “4~fGiKeY”, “port”: 100002, “protocol”: “auth_sha1_v4”, “transfer_enable”: 10737418240, “u”: 0, “user”: “100002” } ] 在以上例子中，端口12345是多用户端口（可看成一个公共用户，但无法直接使用），有两个子用户，一个是10001，一个是100002，而10001用户，既可以使用10001端口，也能通过多用户方式使用12345端口。而100002用户只能使用端口12345。在使用端口12345时，实际的使用流量会统计到10001或100002上。注意的是用户10001在配置客户端使用多用户端口12345的话，配置密码为”vwHF%35j”，即除了协议参数均填写此端口的配置，仅协议参数改为”10001:E&amp;iWmlxu”即可。 其它：在使用mujson_mgr.py脚本添加协议参数时请使用-G且参数使用英文双引号包起来 如有不明白可留言问 第三部分：使用面板支持（适合站长多服务器下使用） 2017-01-24更新： 现在已经有支持此单端口多用户的面板及相应的后端，具体参见 https://github.com/esdeathlove/ss-panel-v3-mod 2017-02-21更新： 如果使用老面板，包括sspanel和WHMCS等，后端更新到最新后，那么可以在user-config.json内，修改或添加如下字段 “additional_ports” : { “6666”: { “passwd”: “pubpassword”, “method”: “aes-128-ctr”, “protocol”: “auth_aes128_md5”, “protocol_param”: “#”, “obfs”: “tls1.2_ticket_auth_compatible”, “obfs_param”: “” } }, 其中6666是那个端口（如果要设置多个，就additional_ports内再添加一个，注意逗号分隔），protocol必须为auth_aes128_md5或auth_aes128_sha1，protocol_param只需且必须写一个#。（直接复制以上内容时记得修改密码配置） 第四部分：高级端口转发 如果设置多个多用户端口，想设置不同端口不同的转发规则以最大化伪装为其它服务，例如开了80端口和443端口作为多用户端口（以additional_ports方式作为示例）： “additional_ports” : { “80”: { “passwd”: “pubpassword”, “method”: “aes-128-ctr”, “protocol”: “auth_aes128_md5”, “protocol_param”: “#”, “obfs”: “tls1.2_ticket_auth_compatible”, “obfs_param”: “” }, “443”: { “passwd”: “pubpassword”, “method”: “aes-128-ctr”, “protocol”: “auth_aes128_md5”, “protocol_param”: “#”, “obfs”: “tls1.2_ticket_auth_compatible”, “obfs_param”: “” } }, 同时本地的nginx/apache开启端口1080和1443，那么在user-config.json里修改如下参数： “redirect” : [“:80#127.0.0.1:1080”, “:443#127.0.0.1:1443”], 配置好后，直接访问80或443端口，将是个正常的网站，用SSR去连接则为代理服务。 其它：nginx的rewrite规则默认会使用监听的端口，这时会导致rewrite有问题，需要指定一下端口号","categories":[{"name":"转载存档","slug":"转载存档","permalink":"http://www.rpchen.com/categories/转载存档/"}],"tags":[]},{"title":"SSR搭建","slug":"ssr-deploy","date":"2017-12-04T07:35:01.000Z","updated":"2017-12-29T08:04:57.114Z","comments":true,"path":"2017/12/04/ssr-deploy/","link":"","permalink":"http://www.rpchen.com/2017/12/04/ssr-deploy/","excerpt":"","text":"SSR服务器端搭建```wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2>&amp;1 | tee shadowsocksR.log shadowsocks.json 位置/etc/shadowsocks.json 重启进程/etc/init.d/shadowsocks restart 卸载./shadowsocksR.sh uninstall","categories":[{"name":"上网","slug":"上网","permalink":"http://www.rpchen.com/categories/上网/"}],"tags":[{"name":"SS","slug":"SS","permalink":"http://www.rpchen.com/tags/SS/"}]}]}